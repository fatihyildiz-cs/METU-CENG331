#Fatih YILDIZ
# 2306793
# Execution begins at address 0
.pos 0
  irmovq stack, %rsp      # set up stack pointer
  irmovq ele0, %rdi		    # set parameter
  call rrev                # call rrev(ele0)
  halt                    # terminate program

# Sample linked list
.pos 0x100
ele0:
  .quad 0x0000a
  .quad ele1
ele1:
  .quad 0x000b0
  .quad ele2
ele2:
  .quad 0x00c00
  .quad ele3
ele3:
  .quad 0x0d000
  .quad ele4
ele4:
  .quad 0xe0000
  .quad 0

# rax holds rev_head, rdi holds head.

rrev:
  xorq %rax, %rax 		    # list* rev_head = 0
  andq %rdi, %rdi         # test head
  je done                 # if(head==0) go to done
  mrmovq $8(%rdi), %r12   # r12 = head->next
  andq %r12, %r12         # test head->next
  je done                 # if(head->next==0) go to done

  pushq %rdi			        # save value from caller
  mrmovq 8(%rdi), %rdi    # rdi = rdi->next
  call rrev               # rrev(rdi)
  popq %rdi				        # restore caller's value
  rmmovq %rdi, $24(%rdi)  # head->next->next = head
  irmovq $0, %r12         # r12 = 0
  rmmovq %r12, 8(%rdi)    # head->next = 0

  ret
done:
  rrmovq %rdi, %rax       # return head
  ret

# Stack starts here and grows to lower addresses
  .pos 0x300
stack:
