                            | 
0x000:                      | .pos 0
0x000: 30f40001000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 30f72000000000000000 | 	irmovq ele1, %rdi		# set parameter
0x014: 805000000000000000   | 	call rsum_list			# call rsum_list(ele1)
0x01d: 00                   | 	halt					# Terminate program
                            | 
0x020:                      | .align 8
0x020:                      | ele1:
0x020: 0a00000000000000     | 	.quad 0x00a
0x028: 3000000000000000     | 	.quad ele2
0x030:                      | ele2:
0x030: b000000000000000     | 	.quad 0x0b0
0x038: 4000000000000000     | 	.quad ele3
0x040:                      | ele3:
0x040: 000c000000000000     | 	.quad 0xc00
0x048: 0000000000000000     | 	.quad 0
                            | 
                            | 
                            | # long rsum_list(list_ptr ls)
0x050:                      | rsum_list:
0x050: 6300                 | 	xorq %rax, %rax 		# val = 0
0x052: 6277                 | 	andq %rdi, %rdi 		# test loop variable
0x054: 738000000000000000   | 	je done 				# go to done if it's null
0x05d: a0af                 | 	pushq %r10				# else, save value from caller
0x05f: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# val = ls->val
0x069: 50770800000000000000 | 	mrmovq $8(%rdi), %rdi	# ls = ls->next
0x073: 805000000000000000   | 	call rsum_list   		# rest = rsum_list(ls)
0x07c: 60a0                 | 	addq %r10, %rax 		# val += rest
0x07e: b0af                 | 	popq %r10				# restore caller's value
0x080:                      | done:
0x080: c0f00000000000000000 | 	iaddq $0, %rax			# return 0
0x08a: 90                   | 	ret
                            | 
                            | 
                            | 
                            | # The stack starts here and grows to lower addresses
0x100:                      | 	.pos 0x100
0x100:                      | stack:
