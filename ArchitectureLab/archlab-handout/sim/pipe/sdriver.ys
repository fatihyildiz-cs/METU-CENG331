#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
    # corrupt all the unused registers to prevent assumptions
    irmovq $0x5710331, %rax
    irmovq $0x5710331, %rcx
    irmovq $0x5710331, %rbp
    irmovq $0x5710331, %r8
    irmovq $0x5710331, %r9
    irmovq $0x5710331, %r10
    irmovq $0x5710331, %r11
    irmovq $0x5710331, %r12
    irmovq $0x5710331, %r13
    irmovq $0x5710331, %r14
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Fatih YILDIZ
# 2306793
#
# Describe how and why you modified the baseline code.
#
# 	First of all, I changed the addition instruction to iaddq whenever applicable. This lowered my 
# average cpe by 2-3.
#
# 	Since using the values fetched from the memory immediately leads to stalling,
# I tried to write at least 1 operation before using the value. However, sometimes I couldn't avoid this 
# because there were no operation to put between.
#
# 	I implemented loop unrolling in my function since loop overhead (checking the condition, jumping etc.)
# causes extra cycles. I tried to go as high number of unrolling as possible but the code for factor 8
# exceeded the 1000 memory limit. So I sticked with 7.
#
# 	With unrolling factor 7, when length => 7 my code goes into the loop where it copies 7 items at once. 
# If the length is a multiple of 7, no need to account for the remainders, however, when
# length % 7 != 0, we have to account for remainders. At first I tried to loop on the remainders
# 1 by 1 till I get to the point where length == 0, however, this led to poor performance. Thus, I
# constructed a jump table where the function gets the exact address of the execution steps to go over 
# the remainders 1 by 1. This took me to about avg 8.03 cpe.
# 	In order to implement the jump table functionality, I needed the JMPQ instruction. But I didn't have
# it. Instead, I utilized the push&return instructions to go to the address that I want.
# 	I also coded a special case when remainder == 6 because going 1 by 1 was slower. This took me to an
# avg cpe of 8.00.
#
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		# count = 0;
	iaddq $-7, %rdx
	jl remains	# if 0 < length < 7, go to remains
	# for 7 <= length, fall

Loop:
	mrmovq (%rdi), %r8	# r8 = first val
	mrmovq 8(%rdi), %r9	# r9 = second val
	mrmovq 16(%rdi), %r10	# r10 = third val
	mrmovq 24(%rdi), %r11	# r11 = fourth val

	andq %r8, %r8	# check if first val is positive
	jle cp1 				# if not pos, got to c1
	iaddq $1, %rax  # else, increment rax

cp1:
	rmmovq %r8, (%rsi)	# write the first val
	rmmovq %r9, 8(%rsi)	# write the second val
	rmmovq %r10, 16(%rsi)	# write the third val
	rmmovq %r11, 24(%rsi)	# write the fourth val

	andq %r9, %r9	# check if second val is positive
	jle cp2 # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

cp2:
	andq %r10, %r10	# check if third val is positive
	jle cp3 # if not pos, go to cp3
	iaddq $1, %rax  # else, increment rax

cp3:
	andq %r11, %r11	# check if fourth val is positive
	jle cp4 # if not pos, go to cp3
	iaddq $1, %rax  # else, increment rax

cp4:
	mrmovq 32(%rdi), %r8	# r8 = fifth val
	mrmovq 40(%rdi), %r9	# r9 = sixth val
	mrmovq 48(%rdi), %r10	# r10 = seventh val

	andq %r8, %r8	# check if fifth val is positive
	jle cp5 				# if not pos, got to c1
	iaddq $1, %rax  # else, increment rax

cp5:
	rmmovq %r8, 32(%rsi)	# write the fifth val
	rmmovq %r9, 40(%rsi)	# write the sixth val
	rmmovq %r10, 48(%rsi)	# write the seventh val

	andq %r9, %r9	# check if sixth val is positive
	jle cp6 # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

cp6:
	andq %r10, %r10	# check if seventh val is positive
	jle inc # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

inc:
	iaddq $56, %rdi		# src += 56
	iaddq $56, %rsi		# dst += 56
	iaddq	$-7, %rdx
	jge Loop			# if so, goto Loop:

remains:
	iaddq $7, %rdx #fall

calculate:
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx # rdx = 8*rdx
	mrmovq JumpTable(%rdx), %r8 # r8 = *(JumpTable+8*size)
	pushq %r8 # push the jump address
	ret	# jump to the calculated address

r6: # special case for remainder == 6.
	mrmovq 40(%rdi), %r8
	mrmovq 32(%rdi), %r9
	mrmovq 24(%rdi), %r10
	mrmovq 16(%rdi), %r11
	mrmovq  8(%rdi), %r12
	mrmovq   (%rdi), %r13
	andq %r8, %r8
	jle r6_1
	iaddq $1, %rax

r6_1:
	andq %r9, %r9
	jle r6_2
	iaddq $1, %rax
r6_2:
	andq %r10, %r10
	jle r6_3
	iaddq $1, %rax
r6_3:
	andq %r11, %r11
	jle r6_4
	iaddq $1, %rax
r6_4:
	andq %r12, %r12
	jle r6_5
	iaddq $1, %rax
r6_5:
	rmmovq %r8, 40(%rsi)
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 24(%rsi)
	rmmovq %r11, 16(%rsi)
	rmmovq %r12, 8(%rsi)
	rmmovq %r13, (%rsi)

	andq %r13, %r13
	jle Done
	iaddq $1, %rax
	jmp Done

r5:
	mrmovq 32(%rdi), %r10
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jle r4
	iaddq $1, %rax
r4:
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle r3
	iaddq $1, %rax
r3:
	mrmovq 16(%rdi), %r10
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle r2
	iaddq $1, %rax
r2:
	mrmovq 8(%rdi), %r10
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	jle r1
	iaddq $1, %rax
r1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
	jmp Done

	JumpTable:
		.quad Done #if rdx (length) is 0, we finish the operation.
		.quad r1
		.quad r2
		.quad r3
		.quad r4
		.quad r5
		.quad r6
	##################################################################
	# Do not modify the following section of code
	# Function epilogue.
	Done:
		ret

	##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
