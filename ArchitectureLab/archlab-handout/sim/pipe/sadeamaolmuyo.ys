#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if len <= 0, go to Done
	iaddq $-8, %rdx
	jle remains	# if 0 < length <= 8, go to remains
	# for 8 <= length, fall

Loop:
	mrmovq (%rdi), %r8	# r8 = first val
	mrmovq 8(%rdi), %r9	# r9 = second val
	mrmovq 16(%rdi), %r10	# r10 = third val
	mrmovq 24(%rdi), %r11	# r11 = third val

	andq %r8, %r8	# check if first val is positive
	jle cp1 				# if not pos, got to c1
	iaddq $1, %rax  # else, increment rax

cp1:
	rmmovq %r8, (%rsi)	# write the first val
	rmmovq %r9, 8(%rsi)	# write the second val
	rmmovq %r10, 16(%rsi)	# write the second val
	rmmovq %r11, 24(%rsi)	# write the second val

	andq %r9, %r9	# check if second val is positive
	jle cp2 # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

cp2:
	andq %r10, %r10	# check if third val is positive
	jle cp3 # if not pos, go to cp3
	iaddq $1, %rax  # else, increment rax

cp3:
	andq %r11, %r11	# check if fourth val is positive
	jle cp4 # if not pos, go to cp3
	iaddq $1, %rax  # else, increment rax

cp4:
	mrmovq 32(%rdi), %r8	# r8 = fifth val
	mrmovq 40(%rdi), %r9	# r9 = sixth val
	mrmovq 48(%rdi), %r10	# r10 = seventh val
	mrmovq 56(%rdi), %r11	# r11 = eighth val

	andq %r8, %r8	# check if fifth val is positive
	jle cp5 				# if not pos, got to c1
	iaddq $1, %rax  # else, increment rax

cp5:
	rmmovq %r8, 32(%rsi)	# write the fifth val
	rmmovq %r9, 40(%rsi)	# write the sixth val
	rmmovq %r10, 48(%rsi)	# write the seventh val
	rmmovq %r11, 56(%rsi)	# write the eighth val

	andq %r9, %r9	# check if sixth val is positive
	jle cp6 # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

cp6:
	andq %r10, %r10	# check if seventh val is positive
	jle cp7 # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

cp7:
	andq %r11, %r11	# check if eighth val is positive
	jle inc # if not pos, go to cp2
	iaddq $1, %rax  # else, increment rax

inc:
	iaddq $64, %rdi		# src += 64
	iaddq $64, %rsi		# dst += 64
	iaddq	$-8, %rdx
	jg Loop			# if so, goto Loop:

remains:
	iaddq $8, %rdi

calculate:
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx # rdx = 8*rdx
	mrmovq JTableStart(%rdx), %r8 # r8 = *(JTableStart+8*size)
	pushq %r8 # push the jump address
	ret

r8:
	mrmovq 56(%rdi), %r10
	rmmovq %r10, 56(%rsi)
	andq %r10, %r10
	jle r6
	iaddq $1, %rax
r7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle r6
	iaddq $1, %rax
r6:
	mrmovq 40(%rdi), %r10
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	jle r5
	iaddq $1, %rax
r5:
	mrmovq 32(%rdi), %r10
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jle r4
	iaddq $1, %rax
r4:
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle r3
	iaddq $1, %rax
r3:
	mrmovq 16(%rdi), %r10
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle r2
	iaddq $1, %rax
r2:
	mrmovq 8(%rdi), %r10
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	jle r1
	iaddq $1, %rax
r1:
	mrmovq (%rdi), %r10
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret

.align 8
JTableStart:
	.quad Done
	.quad r1
	.quad r2
	.quad r3
	.quad r4
	.quad r5
	.quad r6
	.quad r7
	.quad r8
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
