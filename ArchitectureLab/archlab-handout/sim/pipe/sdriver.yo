                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f65804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72004000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x03c: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x046: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x050: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x05a: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x064: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x06e: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x078: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x082: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x08c: 809600000000000000   | 	call ncopy		 
0x095: 00                   | 	halt			# should halt with num nonzeros in %rax
0x096:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Fatih YILDIZ
                            | # 2306793
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 	First of all, I changed the addition instruction to iaddq whenever applicable. This lowered my 
                            | # average cpe by 2-3.
                            | #
                            | # 	Since using the values fetched from the memory immediately leads to stalling,
                            | # I tried to write at least 1 operation before using the value. However, sometimes I couldn't avoid this 
                            | # because there were no operation to put between.
                            | #
                            | # 	I implemented loop unrolling in my function since loop overhead (checking the condition, jumping etc.)
                            | # causes extra cycles. I tried to go as high number of unrolling as possible but the code for factor 8
                            | # exceeded the 1000 memory limit. So I sticked with 7.
                            | #
                            | # 	With unrolling factor 7, when length => 7 my code goes into the loop where it copies 7 items at once. 
                            | # If the length is a multiple of 7, no need to account for the remainders, however, when
                            | # length % 7 != 0, we have to account for remainders. At first I tried to loop on the remainders
                            | # 1 by 1 till I get to the point where length == 0, however, this led to poor performance. Thus, I
                            | # constructed a jump table where the function gets the exact address of the execution steps to go over 
                            | # the remainders 1 by 1. This took me to about avg 8.03 cpe.
                            | # 	In order to implement the jump table functionality, I needed the JMPQ instruction. But I didn't have
                            | # it. Instead, I utilized the push&return instructions to go to the address that I want.
                            | # 	I also coded a special case when remainder == 6 because going 1 by 1 was slower. This took me to an
                            | # avg cpe of 8.00.
                            | #
                            | #
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x096:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x096: 6300                 | 	xorq %rax, %rax		# count = 0;
0x098: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx
0x0a2: 72f101000000000000   | 	jl remains	# if 0 < length < 7, go to remains
                            | 	# for 7 <= length, fall
                            | 
0x0ab:                      | Loop:
0x0ab: 50870000000000000000 | 	mrmovq (%rdi), %r8	# r8 = first val
0x0b5: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# r9 = second val
0x0bf: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# r10 = third val
0x0c9: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# r11 = fourth val
                            | 
0x0d3: 6288                 | 	andq %r8, %r8	# check if first val is positive
0x0d5: 71e800000000000000   | 	jle cp1 				# if not pos, got to c1
0x0de: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x0e8:                      | cp1:
0x0e8: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# write the first val
0x0f2: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# write the second val
0x0fc: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# write the third val
0x106: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# write the fourth val
                            | 
0x110: 6299                 | 	andq %r9, %r9	# check if second val is positive
0x112: 712501000000000000   | 	jle cp2 # if not pos, go to cp2
0x11b: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x125:                      | cp2:
0x125: 62aa                 | 	andq %r10, %r10	# check if third val is positive
0x127: 713a01000000000000   | 	jle cp3 # if not pos, go to cp3
0x130: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x13a:                      | cp3:
0x13a: 62bb                 | 	andq %r11, %r11	# check if fourth val is positive
0x13c: 714f01000000000000   | 	jle cp4 # if not pos, go to cp3
0x145: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x14f:                      | cp4:
0x14f: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# r8 = fifth val
0x159: 50972800000000000000 | 	mrmovq 40(%rdi), %r9	# r9 = sixth val
0x163: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# r10 = seventh val
                            | 
0x16d: 6288                 | 	andq %r8, %r8	# check if fifth val is positive
0x16f: 718201000000000000   | 	jle cp5 				# if not pos, got to c1
0x178: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x182:                      | cp5:
0x182: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# write the fifth val
0x18c: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# write the sixth val
0x196: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# write the seventh val
                            | 
0x1a0: 6299                 | 	andq %r9, %r9	# check if sixth val is positive
0x1a2: 71b501000000000000   | 	jle cp6 # if not pos, go to cp2
0x1ab: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x1b5:                      | cp6:
0x1b5: 62aa                 | 	andq %r10, %r10	# check if seventh val is positive
0x1b7: 71ca01000000000000   | 	jle inc # if not pos, go to cp2
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x1ca:                      | inc:
0x1ca: c0f73800000000000000 | 	iaddq $56, %rdi		# src += 56
0x1d4: c0f63800000000000000 | 	iaddq $56, %rsi		# dst += 56
0x1de: c0f2f9ffffffffffffff | 	iaddq	$-7, %rdx
0x1e8: 75ab00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x1f1:                      | remains:
0x1f1: c0f20700000000000000 | 	iaddq $7, %rdx #fall
                            | 
0x1fb:                      | calculate:
0x1fb: 6022                 | 	addq %rdx, %rdx
0x1fd: 6022                 | 	addq %rdx, %rdx
0x1ff: 6022                 | 	addq %rdx, %rdx # rdx = 8*rdx
0x201: 5082e303000000000000 | 	mrmovq JumpTable(%rdx), %r8 # r8 = *(JumpTable+8*size)
0x20b: a08f                 | 	pushq %r8 # push the jump address
0x20d: 90                   | 	ret	# jump to the calculated address
                            | 
0x20e:                      | r6: # special case for remainder == 6.
0x20e: 50872800000000000000 | 	mrmovq 40(%rdi), %r8
0x218: 50972000000000000000 | 	mrmovq 32(%rdi), %r9
0x222: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x22c: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11
0x236: 50c70800000000000000 | 	mrmovq  8(%rdi), %r12
0x240: 50d70000000000000000 | 	mrmovq   (%rdi), %r13
0x24a: 6288                 | 	andq %r8, %r8
0x24c: 715f02000000000000   | 	jle r6_1
0x255: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x25f:                      | r6_1:
0x25f: 6299                 | 	andq %r9, %r9
0x261: 717402000000000000   | 	jle r6_2
0x26a: c0f00100000000000000 | 	iaddq $1, %rax
0x274:                      | r6_2:
0x274: 62aa                 | 	andq %r10, %r10
0x276: 718902000000000000   | 	jle r6_3
0x27f: c0f00100000000000000 | 	iaddq $1, %rax
0x289:                      | r6_3:
0x289: 62bb                 | 	andq %r11, %r11
0x28b: 719e02000000000000   | 	jle r6_4
0x294: c0f00100000000000000 | 	iaddq $1, %rax
0x29e:                      | r6_4:
0x29e: 62cc                 | 	andq %r12, %r12
0x2a0: 71b302000000000000   | 	jle r6_5
0x2a9: c0f00100000000000000 | 	iaddq $1, %rax
0x2b3:                      | r6_5:
0x2b3: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)
0x2bd: 40962000000000000000 | 	rmmovq %r9, 32(%rsi)
0x2c7: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2d1: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x2db: 40c60800000000000000 | 	rmmovq %r12, 8(%rsi)
0x2e5: 40d60000000000000000 | 	rmmovq %r13, (%rsi)
                            | 
0x2ef: 62dd                 | 	andq %r13, %r13
0x2f1: 711b04000000000000   | 	jle Done
0x2fa: c0f00100000000000000 | 	iaddq $1, %rax
0x304: 701b04000000000000   | 	jmp Done
                            | 
0x30d:                      | r5:
0x30d: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x317: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x321: 62aa                 | 	andq %r10, %r10
0x323: 713603000000000000   | 	jle r4
0x32c: c0f00100000000000000 | 	iaddq $1, %rax
0x336:                      | r4:
0x336: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x340: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x34a: 62aa                 | 	andq %r10, %r10
0x34c: 715f03000000000000   | 	jle r3
0x355: c0f00100000000000000 | 	iaddq $1, %rax
0x35f:                      | r3:
0x35f: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x369: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x373: 62aa                 | 	andq %r10, %r10
0x375: 718803000000000000   | 	jle r2
0x37e: c0f00100000000000000 | 	iaddq $1, %rax
0x388:                      | r2:
0x388: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x392: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x39c: 62aa                 | 	andq %r10, %r10
0x39e: 71b103000000000000   | 	jle r1
0x3a7: c0f00100000000000000 | 	iaddq $1, %rax
0x3b1:                      | r1:
0x3b1: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x3bb: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x3c5: 62aa                 | 	andq %r10, %r10
0x3c7: 711b04000000000000   | 	jle Done
0x3d0: c0f00100000000000000 | 	iaddq $1, %rax
0x3da: 701b04000000000000   | 	jmp Done
                            | 
0x3e3:                      | 	JumpTable:
0x3e3: 1b04000000000000     | 		.quad Done #if rdx (length) is 0, we finish the operation.
0x3eb: b103000000000000     | 		.quad r1
0x3f3: 8803000000000000     | 		.quad r2
0x3fb: 5f03000000000000     | 		.quad r3
0x403: 3603000000000000     | 		.quad r4
0x40b: 0d03000000000000     | 		.quad r5
0x413: 0e02000000000000     | 		.quad r6
                            | 	##################################################################
                            | 	# Do not modify the following section of code
                            | 	# Function epilogue.
0x41b:                      | 	Done:
0x41b: 90                   | 		ret
                            | 
                            | 	##################################################################
                            | # Keep the following label at the end of your function
0x41c:                      | End:
                            | #/* $end ncopy-ys */
0x41c:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x420:                      | 	.align 8
0x420:                      | src:
0x420: 0100000000000000     | 	.quad 1
0x428: feffffffffffffff     | 	.quad -2
0x430: fdffffffffffffff     | 	.quad -3
0x438: 0400000000000000     | 	.quad 4
0x440: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x450:                      | 	.align 16
0x450:                      | Predest:
0x450: fadebc0000000000     | 	.quad 0xbcdefa
0x458:                      | dest:
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478:                      | Postdest:
0x478: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x480:                      | .align 8
                            | # Run time stack
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
                            | 
0x500:                      | Stack:
