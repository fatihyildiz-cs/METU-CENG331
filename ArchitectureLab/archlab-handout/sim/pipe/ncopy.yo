                            | # Fatih YILDIZ
                            | # 2306793
                            | #
                            | # 	First of all, I changed the addition instruction to iaddq whenever applicable. This lowered my 
                            | # average cpe by 2-3.
                            | #
                            | # 	Since using the values fetched from the memory immediately leads to stalling,
                            | # I tried to write at least 1 operation before using the value. However, sometimes I couldn't avoid this 
                            | # because there were no operation to put between.
                            | #
                            | # 	I implemented loop unrolling in my function since loop overhead (checking the condition, jumping etc.)
                            | # causes extra cycles. I tried to go as high number of unrolling as possible but the code for factor 8
                            | # exceeded the 1000 memory limit. So I sticked with 7.
                            | #
                            | # 	With unrolling factor 7, when length => 7 my code goes into the loop where it copies 7 items at once. 
                            | # If the length is a multiple of 7, no need to account for the remainders, however, when
                            | # length % 7 != 0, we have to account for remainders. At first I tried to loop on the remainders
                            | # 1 by 1 till I get to the point where length == 0, however, this led to poor performance. Thus, I
                            | # constructed a jump table where the function gets the exact address of the execution steps to go over 
                            | # the remainders 1 by 1. This took me to about avg 8.03 cpe.
                            | # 	In order to implement the jump table functionality, I needed the JMPQ instruction. But I didn't have
                            | # it. Instead, I utilized the push&return instructions to go to the address that I want.
                            | # 	I also coded a special case when remainder == 6 because going 1 by 1 was slower. This took me to an
                            | # avg cpe of 8.00.
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax, %rax		# count = 0;
0x002: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx
0x00c: 725b01000000000000   | 	jl remains	# if 0 < length < 7, go to remains
                            | 	# for 7 <= length, fall
                            | 
0x015:                      | Loop:
0x015: 50870000000000000000 | 	mrmovq (%rdi), %r8	# r8 = first val
0x01f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# r9 = second val
0x029: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# r10 = third val
0x033: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# r11 = third val
                            | 
0x03d: 6288                 | 	andq %r8, %r8	# check if first val is positive
0x03f: 715200000000000000   | 	jle cp1 				# if not pos, got to c1
0x048: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x052:                      | cp1:
0x052: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# write the first val
0x05c: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# write the second val
0x066: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# write the second val
0x070: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# write the second val
                            | 
0x07a: 6299                 | 	andq %r9, %r9	# check if second val is positive
0x07c: 718f00000000000000   | 	jle cp2 # if not pos, go to cp2
0x085: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x08f:                      | cp2:
0x08f: 62aa                 | 	andq %r10, %r10	# check if third val is positive
0x091: 71a400000000000000   | 	jle cp3 # if not pos, go to cp3
0x09a: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x0a4:                      | cp3:
0x0a4: 62bb                 | 	andq %r11, %r11	# check if fourth val is positive
0x0a6: 71b900000000000000   | 	jle cp4 # if not pos, go to cp3
0x0af: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x0b9:                      | cp4:
0x0b9: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# r8 = fifth val
0x0c3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9	# r9 = sixth val
0x0cd: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# r10 = seventh val
                            | 
0x0d7: 6288                 | 	andq %r8, %r8	# check if fifth val is positive
0x0d9: 71ec00000000000000   | 	jle cp5 				# if not pos, got to c1
0x0e2: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x0ec:                      | cp5:
0x0ec: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# write the fifth val
0x0f6: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# write the sixth val
0x100: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# write the seventh val
                            | 
0x10a: 6299                 | 	andq %r9, %r9	# check if sixth val is positive
0x10c: 711f01000000000000   | 	jle cp6 # if not pos, go to cp2
0x115: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x11f:                      | cp6:
0x11f: 62aa                 | 	andq %r10, %r10	# check if seventh val is positive
0x121: 713401000000000000   | 	jle inc # if not pos, go to cp2
0x12a: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x134:                      | inc:
0x134: c0f73800000000000000 | 	iaddq $56, %rdi		# src += 56
0x13e: c0f63800000000000000 | 	iaddq $56, %rsi		# dst += 56
0x148: c0f2f9ffffffffffffff | 	iaddq	$-7, %rdx
0x152: 751500000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x15b:                      | remains:
0x15b: c0f20700000000000000 | 	iaddq $7, %rdx
                            | 
0x165:                      | calculate:
0x165: 6022                 | 	addq %rdx, %rdx
0x167: 6022                 | 	addq %rdx, %rdx
0x169: 6022                 | 	addq %rdx, %rdx # rdx = 8*rdx
0x16b: 50824d03000000000000 | 	mrmovq JumpTable(%rdx), %r8 # r8 = *(JTableStart+8*size)
0x175: a08f                 | 	pushq %r8 # push the jump address
0x177: 90                   | 	ret
                            | 
0x178:                      | r6: # special case for remainder == 6.
0x178: 50872800000000000000 | 	mrmovq 40(%rdi), %r8
0x182: 50972000000000000000 | 	mrmovq 32(%rdi), %r9
0x18c: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x196: 50b71000000000000000 | 	mrmovq 16(%rdi), %r11
0x1a0: 50c70800000000000000 | 	mrmovq  8(%rdi), %r12
0x1aa: 50d70000000000000000 | 	mrmovq   (%rdi), %r13
0x1b4: 6288                 | 	andq %r8, %r8
0x1b6: 71c901000000000000   | 	jle r6_1
0x1bf: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1c9:                      | r6_1:
0x1c9: 6299                 | 	andq %r9, %r9
0x1cb: 71de01000000000000   | 	jle r6_2
0x1d4: c0f00100000000000000 | 	iaddq $1, %rax
0x1de:                      | r6_2:
0x1de: 62aa                 | 	andq %r10, %r10
0x1e0: 71f301000000000000   | 	jle r6_3
0x1e9: c0f00100000000000000 | 	iaddq $1, %rax
0x1f3:                      | r6_3:
0x1f3: 62bb                 | 	andq %r11, %r11
0x1f5: 710802000000000000   | 	jle r6_4
0x1fe: c0f00100000000000000 | 	iaddq $1, %rax
0x208:                      | r6_4:
0x208: 62cc                 | 	andq %r12, %r12
0x20a: 711d02000000000000   | 	jle r6_5
0x213: c0f00100000000000000 | 	iaddq $1, %rax
0x21d:                      | r6_5:
0x21d: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)
0x227: 40962000000000000000 | 	rmmovq %r9, 32(%rsi)
0x231: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x23b: 40b61000000000000000 | 	rmmovq %r11, 16(%rsi)
0x245: 40c60800000000000000 | 	rmmovq %r12, 8(%rsi)
0x24f: 40d60000000000000000 | 	rmmovq %r13, (%rsi)
                            | 
0x259: 62dd                 | 	andq %r13, %r13
0x25b: 718503000000000000   | 	jle Done
0x264: c0f00100000000000000 | 	iaddq $1, %rax
0x26e: 708503000000000000   | 	jmp Done
                            | 
0x277:                      | r5:
0x277: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x281: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x28b: 62aa                 | 	andq %r10, %r10
0x28d: 71a002000000000000   | 	jle r4
0x296: c0f00100000000000000 | 	iaddq $1, %rax
0x2a0:                      | r4:
0x2a0: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x2aa: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2b4: 62aa                 | 	andq %r10, %r10
0x2b6: 71c902000000000000   | 	jle r3
0x2bf: c0f00100000000000000 | 	iaddq $1, %rax
0x2c9:                      | r3:
0x2c9: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x2d3: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x2dd: 62aa                 | 	andq %r10, %r10
0x2df: 71f202000000000000   | 	jle r2
0x2e8: c0f00100000000000000 | 	iaddq $1, %rax
0x2f2:                      | r2:
0x2f2: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x2fc: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x306: 62aa                 | 	andq %r10, %r10
0x308: 711b03000000000000   | 	jle r1
0x311: c0f00100000000000000 | 	iaddq $1, %rax
0x31b:                      | r1:
0x31b: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x325: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x32f: 62aa                 | 	andq %r10, %r10
0x331: 718503000000000000   | 	jle Done
0x33a: c0f00100000000000000 | 	iaddq $1, %rax
0x344: 708503000000000000   | 	jmp Done
                            | 
0x34d:                      | 	JumpTable:
0x34d: 8503000000000000     | 		.quad Done #if rdx (length) is 0, we finish the operation.
0x355: 1b03000000000000     | 		.quad r1
0x35d: f202000000000000     | 		.quad r2
0x365: c902000000000000     | 		.quad r3
0x36d: a002000000000000     | 		.quad r4
0x375: 7702000000000000     | 		.quad r5
0x37d: 7801000000000000     | 		.quad r6
                            | 	##################################################################
                            | 	# Do not modify the following section of code
                            | 	# Function epilogue.
0x385:                      | 	Done:
0x385: 90                   | 		ret
                            | 
                            | 	##################################################################
                            | # Keep the following label at the end of your function
0x386:                      | End:
                            | #/* $end ncopy-ys */
