                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76004000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x03c: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x046: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x050: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x05a: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x064: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x06e: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x078: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x082: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x08c: 809600000000000000   | 	call ncopy		 
0x095: 00                   | 	halt			# should halt with num nonzeros in %rax
0x096:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x096:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x096: 30f00000000000000000 | 	irmovq $0, %rax		# count = 0;
0x0a0: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x0a2: 715d04000000000000   | 	jle Done		# if len <= 0, go to Done
0x0ab: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x0b5: 722d02000000000000   | 	jl thereAreLeftovers	# if 0 < length < 8, go to leftOvers
                            | 	# for 8 <= length, fall
                            | 
0x0be:                      | Loop:
0x0be: 50870000000000000000 | 	mrmovq (%rdi), %r8	# r8 = first val
0x0c8: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# r9 = second val
0x0d2: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# r10 = third val
0x0dc: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# r11 = third val
                            | 
0x0e6: 6288                 | 	andq %r8, %r8	# check if first val is positive
0x0e8: 71fb00000000000000   | 	jle cp1 				# if not pos, got to c1
0x0f1: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x0fb:                      | cp1:
0x0fb: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# write the first val
0x105: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# write the second val
0x10f: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# write the second val
0x119: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# write the second val
                            | 
0x123: 6299                 | 	andq %r9, %r9	# check if second val is positive
0x125: 713801000000000000   | 	jle cp2 # if not pos, go to cp2
0x12e: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x138:                      | cp2:
0x138: 62aa                 | 	andq %r10, %r10	# check if third val is positive
0x13a: 714d01000000000000   | 	jle cp3 # if not pos, go to cp3
0x143: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x14d:                      | cp3:
0x14d: 62bb                 | 	andq %r11, %r11	# check if fourth val is positive
0x14f: 716201000000000000   | 	jle cp4 # if not pos, go to cp3
0x158: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x162:                      | cp4:
0x162: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# r8 = fifth val
0x16c: 50972800000000000000 | 	mrmovq 40(%rdi), %r9	# r9 = sixth val
0x176: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# r10 = seventh val
0x180: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# r11 = eighth val
                            | 
0x18a: 6288                 | 	andq %r8, %r8	# check if fifth val is positive
0x18c: 719f01000000000000   | 	jle cp5 				# if not pos, got to c1
0x195: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 	
0x19f:                      | cp5:
0x19f: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# write the fifth val
0x1a9: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# write the sixth val
0x1b3: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# write the seventh val
0x1bd: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# write the eighth val
                            | 
0x1c7: 6299                 | 	andq %r9, %r9	# check if sixth val is positive
0x1c9: 71dc01000000000000   | 	jle cp6 # if not pos, go to cp2
0x1d2: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x1dc:                      | cp6:
0x1dc: 62aa                 | 	andq %r10, %r10	# check if seventh val is positive
0x1de: 71f101000000000000   | 	jle cp7 # if not pos, go to cp2
0x1e7: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x1f1:                      | cp7:
0x1f1: 62bb                 | 	andq %r11, %r11	# check if eighth val is positive
0x1f3: 710602000000000000   | 	jle inc # if not pos, go to cp2
0x1fc: c0f00100000000000000 | 	iaddq $1, %rax  # else, increment rax
                            | 
0x206:                      | inc:
0x206: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 64
0x210: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 64
0x21a: c0f2f8ffffffffffffff | 	iaddq	$-8, %rdx
0x224: 75be00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x22d:                      | thereAreLeftovers:
0x22d: c0f20700000000000000 | 	iaddq $7, %rdx
                            | 
0x237:                      | r1:
0x237: 725d04000000000000   | 	jl Done
0x240: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x24a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x254: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x25e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x268: 62aa                 | 	andq %r10, %r10
0x26a: 717d02000000000000   | 	jle r2
0x273: c0f00100000000000000 | 	iaddq $1, %rax
0x27d:                      | r2:
0x27d: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x287: 725d04000000000000   | 	jl Done
0x290: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x29a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x2a4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x2ae: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x2b8: 62aa                 | 	andq %r10, %r10
0x2ba: 71cd02000000000000   | 	jle r3
0x2c3: c0f00100000000000000 | 	iaddq $1, %rax
0x2cd:                      | r3:
0x2cd: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x2d7: 725d04000000000000   | 	jl Done
0x2e0: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x2ea: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x2f4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x2fe: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x308: 62aa                 | 	andq %r10, %r10
0x30a: 711d03000000000000   | 	jle r4
0x313: c0f00100000000000000 | 	iaddq $1, %rax
0x31d:                      | r4:
0x31d: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x327: 725d04000000000000   | 	jl Done
0x330: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x33a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x344: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x34e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x358: 62aa                 | 	andq %r10, %r10
0x35a: 716d03000000000000   | 	jle r5
0x363: c0f00100000000000000 | 	iaddq $1, %rax
0x36d:                      | r5:
0x36d: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x377: 725d04000000000000   | 	jl Done
0x380: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x38a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x394: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x39e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3a8: 62aa                 | 	andq %r10, %r10
0x3aa: 71bd03000000000000   | 	jle r6
0x3b3: c0f00100000000000000 | 	iaddq $1, %rax
0x3bd:                      | r6:
0x3bd: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x3c7: 725d04000000000000   | 	jl Done
0x3d0: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x3da: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x3e4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x3ee: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3f8: 62aa                 | 	andq %r10, %r10
0x3fa: 710d04000000000000   | 	jle r7
0x403: c0f00100000000000000 | 	iaddq $1, %rax
0x40d:                      | r7:
0x40d: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx       # len--
0x417: 725d04000000000000   | 	jl Done
0x420: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x42a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x434: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x43e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x448: 62aa                 | 	andq %r10, %r10
0x44a: 715d04000000000000   | 	jle Done
0x453: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x45d:                      | Done:
0x45d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x45e:                      | End:
                            | #/* $end ncopy-ys */
0x45e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x460:                      | 	.align 8
0x460:                      | src:
0x460: 0100000000000000     | 	.quad 1
0x468: feffffffffffffff     | 	.quad -2
0x470: fdffffffffffffff     | 	.quad -3
0x478: fcffffffffffffff     | 	.quad -4
0x480: fbffffffffffffff     | 	.quad -5
0x488: faffffffffffffff     | 	.quad -6
0x490: f9ffffffffffffff     | 	.quad -7
0x498: 0800000000000000     | 	.quad 8
0x4a0: f7ffffffffffffff     | 	.quad -9
0x4a8: f6ffffffffffffff     | 	.quad -10
0x4b0: f5ffffffffffffff     | 	.quad -11
0x4b8: 0c00000000000000     | 	.quad 12
0x4c0: f3ffffffffffffff     | 	.quad -13
0x4c8: f2ffffffffffffff     | 	.quad -14
0x4d0: 0f00000000000000     | 	.quad 15
0x4d8: 1000000000000000     | 	.quad 16
0x4e0: efffffffffffffff     | 	.quad -17
0x4e8: 1200000000000000     | 	.quad 18
0x4f0: 1300000000000000     | 	.quad 19
0x4f8: ecffffffffffffff     | 	.quad -20
0x500: ebffffffffffffff     | 	.quad -21
0x508: eaffffffffffffff     | 	.quad -22
0x510: 1700000000000000     | 	.quad 23
0x518: 1800000000000000     | 	.quad 24
0x520: 1900000000000000     | 	.quad 25
0x528: e6ffffffffffffff     | 	.quad -26
0x530: e5ffffffffffffff     | 	.quad -27
0x538: e4ffffffffffffff     | 	.quad -28
0x540: e3ffffffffffffff     | 	.quad -29
0x548: 1e00000000000000     | 	.quad 30
0x550: e1ffffffffffffff     | 	.quad -31
0x558: 2000000000000000     | 	.quad 32
0x560: 2100000000000000     | 	.quad 33
0x568: deffffffffffffff     | 	.quad -34
0x570: ddffffffffffffff     | 	.quad -35
0x578: dcffffffffffffff     | 	.quad -36
0x580: 2500000000000000     | 	.quad 37
0x588: daffffffffffffff     | 	.quad -38
0x590: 2700000000000000     | 	.quad 39
0x598: d8ffffffffffffff     | 	.quad -40
0x5a0: d7ffffffffffffff     | 	.quad -41
0x5a8: 2a00000000000000     | 	.quad 42
0x5b0: d5ffffffffffffff     | 	.quad -43
0x5b8: d4ffffffffffffff     | 	.quad -44
0x5c0: 2d00000000000000     | 	.quad 45
0x5c8: d2ffffffffffffff     | 	.quad -46
0x5d0: d1ffffffffffffff     | 	.quad -47
0x5d8: d0ffffffffffffff     | 	.quad -48
0x5e0: cfffffffffffffff     | 	.quad -49
0x5e8: 3200000000000000     | 	.quad 50
0x5f0: 3300000000000000     | 	.quad 51
0x5f8: 3400000000000000     | 	.quad 52
0x600: 3500000000000000     | 	.quad 53
0x608: 3600000000000000     | 	.quad 54
0x610: 3700000000000000     | 	.quad 55
0x618: 3800000000000000     | 	.quad 56
0x620: 3900000000000000     | 	.quad 57
0x628: 3a00000000000000     | 	.quad 58
0x630: 3b00000000000000     | 	.quad 59
0x638: 3c00000000000000     | 	.quad 60
0x640: 3d00000000000000     | 	.quad 61
0x648: 3e00000000000000     | 	.quad 62
0x650: 3f00000000000000     | 	.quad 63
0x658: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x660:                      | 	.align 16
0x660:                      | Predest:
0x660: fadebc0000000000     | 	.quad 0xbcdefa
0x668:                      | dest:
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860:                      | Postdest:
0x860: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x868:                      | .align 8
                            | # Run time stack
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
0x898: 0000000000000000     | 	.quad 0
0x8a0: 0000000000000000     | 	.quad 0
0x8a8: 0000000000000000     | 	.quad 0
0x8b0: 0000000000000000     | 	.quad 0
0x8b8: 0000000000000000     | 	.quad 0
0x8c0: 0000000000000000     | 	.quad 0
0x8c8: 0000000000000000     | 	.quad 0
0x8d0: 0000000000000000     | 	.quad 0
0x8d8: 0000000000000000     | 	.quad 0
0x8e0: 0000000000000000     | 	.quad 0
                            | 
0x8e8:                      | Stack:
